<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Videos on Josh Bowden</title>
    <link>https://jbowden.me/categories/videos/</link>
    <description>Recent content in Videos on Josh Bowden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jul 2016 23:19:50 +0000</lastBuildDate>
    
	<atom:link href="https://jbowden.me/categories/videos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>On Mainstream FP</title>
      <link>https://jbowden.me/posts/reddit/on-mainstream-fp/</link>
      <pubDate>Fri, 08 Jul 2016 23:19:50 +0000</pubDate>
      
      <guid>https://jbowden.me/posts/reddit/on-mainstream-fp/</guid>
      <description>Snipped and backdated from a Reddit comment of mine.
  If functional programming is so great, why is it still niche? We have a product that can practically eliminate runtime errors, make refactoring much easier, lighten the testing burden, all while being quite delightful to use. Whatâ€™s the hold up?
One factor is that we make things artificially hard to learn, sometimes with a seemingly pathological glee.
 This is from the Elm&amp;rsquo;s &amp;ldquo;Let Be Mainstream!</description>
    </item>
    
  </channel>
</rss>